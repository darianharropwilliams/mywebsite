{
    "title": "CHIP-8 WebAssembly Emulator",
    "summary": "A browser-based CHIP-8 emulator with support for real-time input, rendering, and audio via WebAssembly.",
    "tech": ["C", "WebAssembly", "JavaScript", "HTML"],
    "image": "/logo512.png",
    "slug": "chip8-emulator",
    "date": "Spring 2025",
    "featured": true,
    "description": {
      "situation": "I wanted to deepen my understanding of low-level emulation and explore cross-compilation with WebAssembly.",
      "task": "Create a CHIP-8 emulator in C that could be compiled to WebAssembly and run fully in the browser.",
      "action": "Built a modular C emulator with rendering, input, and sound abstractions, and used Emscripten to expose a WASM interface. Integrated a JS frontend to handle file uploads, rendering to canvas, and input polling.",
      "result": "Successfully deployed a fully functional emulator that runs dozens of CHIP-8 ROMs interactively in the browser, complete with beeps, keyboard input, and dynamic loading."
    },
    "challenges": [
      "Mapping CHIP-8's 16-key layout to modern keyboards in a user-friendly way.",
      "Interfacing native C memory with JavaScript for display and input handling without performance drops."
    ],
    "contributions": [
      "Wrote the core emulator in C and abstracted platform-dependent components for WASM.",
      "Implemented a lightweight frontend with dynamic ROM loading and canvas rendering."
    ],
    "skills": [
      "Low-level systems programming",
      "WebAssembly integration"
    ],
    "achievements": "Ran 20+ CHIP-8 games in-browser with responsive controls and audio, demonstrating real-time WASM-C-JS interoperability.",
    "resume_bullet": "Developed a CHIP-8 emulator in C with a WebAssembly frontend, enabling real-time game emulation in the browser with keyboard and audio support.",
    "story_mode": "I built a CHIP-8 emulator from scratch in C, then ported it to the web using WebAssembly. I handled everything from opcode execution to memory management and sound, then bridged the emulator to JavaScript for input, canvas rendering, and file loading. Watching classic games like Tetris and Pong run seamlessly in-browser was incredibly rewarding."
  }
  