{
  "title": "Chess Piece Image Classifier",
  "summary": "Built a deep learning classifier to recognize individual chess pieces from real-world images, achieving 91% accuracy through advanced augmentation and convolutional neural networks.",
  "tech": ["Python", "PyTorch", "CNN", "Computer Vision", "Data Augmentation"],
  "image": "/logo512.png",
  "slug": "chess-image-classifier",
  "date": "Spring 2024",
  "featured": false,
  "description": {
    "situation": "Board state recognition in chess starts with accurately identifying individual pieces from diverse visual sources, including photographs, sketches, and rendered images.",
    "task": "As part of a self-chosen project in a deep learning course, I aimed to develop a model capable of classifying isolated chess piece images into six categories despite variations in lighting, style, and quality.",
    "action": "I designed a convolutional neural network with six convolutional layers, batch normalization, Leaky ReLU activations, and dropout for regularization. I engineered a custom augmentation pipeline that applied rotations, flips, noise, brightness shifts, blurring, zooming, and translations to scale the dataset from hundreds to over 140,000 images. The model was trained and validated with held-out data using Adam optimizer, CrossEntropy loss, and early stopping based on validation loss.",
    "result": "The classifier achieved 91% accuracy and F1 score on a separate test set, outperforming initial baselines by nearly 30%. This project built a strong foundation for future full-board chess state recognition from images."
  },
  "challenges": [
    "Handling limited original dataset size and achieving realistic data diversity through augmentation.",
    "Designing a CNN architecture deep enough for complex features without overfitting.",
    "Managing heavy class imbalance between common and rare chess pieces.",
    "Generalizing across drastically different visual styles (photos, drawings, and synthetic images)."
  ],
  "contributions": [
    "Created a custom augmentation pipeline applying 8+ transformations including rotations, noise, zoom, blur, brightness adjustment, and pixel shifts.",
    "Built and tuned a deep CNN with 6 convolutional layers, batch normalization, Leaky ReLU activations, and dropout regularization.",
    "Boosted validation accuracy from 64% to 91% through iterative model refinement and hyperparameter tuning.",
    "Generated and managed a training dataset scaled to over 140,000 samples from an initial few hundred images.",
    "Designed and evaluated the full model training pipeline, saving and restoring the best model via PyTorch checkpointing."
  ],
  "skills": [
    "Data augmentation engineering (rotation, noise, brightness, zoom, blur, translation)",
    "Deep CNN architecture design and tuning",
    "Advanced training techniques (early stopping, dropout regularization)",
    "Evaluation metrics (accuracy, F1 score, confusion matrix)",
    "Performance optimization for small-to-medium datasets"
  ],
  "achievements": "Successfully completed a self-directed school project achieving 91% accuracy and 91% F1 score on unseen chess piece images through deep learning and heavy data augmentation.",
  "resume_bullet": "Built a CNN-based chess piece classifier achieving 91% accuracy via custom augmentation (rotations, noise, zoom, translation) and deep model tuning, as part of a self-directed academic project (PyTorch, 6 conv layers).",
  "story_mode": "As part of a self-directed deep learning project for a course, I developed a chess piece image classifier using PyTorch. To overcome an initially small dataset, I engineered a heavy augmentation pipeline applying rotations, noise, brightness changes, zooming, and pixel shifts, expanding the dataset to over 140,000 samples. I built a deep convolutional model with batch normalization and Leaky ReLU activations, achieving 91% accuracy and F1 score on unseen test data."
}
