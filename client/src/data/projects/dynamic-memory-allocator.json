{
  "title": "Dynamic Memory Allocator",
  "summary": "Designed and optimized a custom C memory allocator with 16-bin segmented free lists, compact metadata, and real heap expansion via sbrk(), balancing speed and memory reuse under stress-testing conditions.",
  "tech": ["C", "Memory Management", "Low-level Programming", "Data Structures", "Systems Programming"],
  "image": "/logo512.png",
  "slug": "dynamic-memory-allocator",
  "date": "Spring 2024",
  "featured": false,
  "description": {
    "situation": "I wanted to deeply understand how malloc and free operate internally by building a production-style memory allocator from scratch in C.",
    "task": "My objective was to implement a dynamic memory allocator supporting malloc, free, realloc, and heap expansion, while minimizing fragmentation and prioritizing throughput under rigorous stress-testing conditions.",
    "action": "I architected a segmented free list system with 16 size classes, each maintained as a sorted linked list to enable near-best-fit searches. Blocks were represented with compact headers and footers using C bit-level struct packing techniques, and each free block contained an embedded lightweight linked list node for efficient list management. Allocations searched the corresponding bin, falling back to larger bins if needed, and expanded the heap using sbrk() only as a last resort. All block sizes were aligned to 16 bytes to preserve proper memory access alignment. Coalescing adjacent free blocks was performed immediately on free to maximize memory reuse without penalizing allocation speed, while realloc operations were handled without coalescing to optimize performance.",
    "result": "The allocator passed extensive randomized stress tests provided by the course, successfully maintaining heap integrity and achieving high throughput rates while controlling fragmentation. Through this project, I gained substantial experience in low-level systems programming, memory layout optimization, and performance engineering at the allocator level."
  },
  "challenges": [
    "Tuning 16-bin segmentation to optimize search speed versus fragmentation across real-world allocation patterns.",
    "Compressing block metadata efficiently using C bit-fields and alignment tricks without sacrificing critical information for allocation/freeing logic.",
    "Designing an intrusive linked list system embedded inside free blocks for O(1) list operations.",
    "Implementing robust fallback logic from smaller bins to larger bins and handling heap expansion cleanly with sbrk().",
    "Balancing the trade-offs between speed (throughput) and memory efficiency, especially under heavy realloc and free activity."
  ],
  "contributions": [
    "Built a high-performance dynamic memory allocator with 16 size-segmented bins, sorted to approximate best-fit allocation.",
    "Engineered lightweight, embedded linked lists within free blocks for efficient list manipulation without extra memory overhead.",
    "Used bit-packed headers and footers to store metadata while preserving 16-byte alignment for payloads.",
    "Performed immediate coalescing during free operations, while treating realloc independently to maximize runtime speed.",
    "Implemented dynamic heap expansion via sbrk() system call when no suitable block existed across all bins.",
    "Stress-tested allocator under randomized alloc/free patterns provided by the course, achieving high throughput and robust heap management under load.",
    "Developed an advanced understanding of allocator design trade-offs, systems memory management, and low-level optimization techniques."
  ],
  "skills": [
    "Segmented allocator design (16 bins)",
    "Compact memory metadata (bit packing, alignment)",
    "Intrusive linked lists",
    "sbrk()-based dynamic heap expansion",
    "Throughput optimization under stress conditions",
    "Low-level memory debugging and performance tuning"
  ],
  "achievements": "Successfully passed all provided memory stress benchmarks and performance tests in a systems programming course environment.",
  "resume_bullet": "Designed and optimized a C-based dynamic memory allocator with 16-bin segmented free lists, compact metadata, and sbrk()-based heap expansion, achieving high throughput under randomized stress tests (course project).",
  "story_mode": "In a systems programming course, I built a dynamic memory allocator in C featuring 16 segmented bins, compressed metadata structures, and dynamic heap expansion via sbrk(). I implemented fast free block coalescing and lightweight intrusive linked lists to optimize memory reuse without slowing allocation speed. Rigorous stress-testing validated the allocatorâ€™s high throughput and taught me critical lessons in low-level memory management and systems-level optimization."
}
